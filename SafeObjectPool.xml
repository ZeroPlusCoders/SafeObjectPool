<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SafeObjectPool</name>
    </assembly>
    <members>
        <member name="M:SafeObjectPool.DefaultPolicy`1.OnCreate">
            <summary>
            Creates the object using the constructor func provided
            </summary>
            <returns></returns>
        </member>
        <member name="P:SafeObjectPool.IObjectPool`1.IsAvailable">
            <summary>
            Is it available?
            </summary>
        </member>
        <member name="P:SafeObjectPool.IObjectPool`1.UnavailableException">
            <summary>
            Unavailable Exception
            </summary>
        </member>
        <member name="P:SafeObjectPool.IObjectPool`1.UnavailableTime">
            <summary>
            Unavailable Time
            </summary>
        </member>
        <member name="M:SafeObjectPool.IObjectPool`1.SetUnavailable(System.Exception)">
            <summary>
            Set the object pool as unavailable, subsequent Get/GetAsync will report an error, 
            and start the background timing check service to restore availability
            </summary>
            <param name="exception"></param>
            <returns>Return true when it changes from [Available] to [Unavailable]ï¼Œotherwise returns false</returns>
        </member>
        <member name="P:SafeObjectPool.IObjectPool`1.Statistics">
            <summary>
            Stats on Objects in the object pool
            </summary>
        </member>
        <member name="P:SafeObjectPool.IObjectPool`1.StatisticsFull">
            <summary>
            Statistics on objects in the object pool (full)
            </summary>
        </member>
        <member name="M:SafeObjectPool.IObjectPool`1.Get(System.Nullable{System.TimeSpan})">
            <summary>
            Get an object from the pool
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="P:SafeObjectPool.IObjectPool`1.AllCount">
            <summary>
            Number of objects in the pool
            </summary>
        </member>
        <member name="P:SafeObjectPool.IObjectPool`1.FreeCount">
            <summary>
            Number of objects returned to the pool
            </summary>
        </member>
        <member name="P:SafeObjectPool.IObjectPool`1.MaxCount">
            <summary>
            Maximum number of objects in the pool
            </summary>
        </member>
        <member name="M:SafeObjectPool.IObjectPool`1.GetAsync">
            <summary>
            Get an object from the pool asynchronously
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeObjectPool.IObjectPool`1.Return(SafeObjectPool.Object{`0},System.Boolean)">
            <summary>
            Return object to the pool
            </summary>
            <param name="obj"></param>
            <param name="isReset">whether to recreate or just put in the pool</param>
        </member>
        <member name="P:SafeObjectPool.IPolicy`1.Name">
            <summary>
            Name of the policy
            </summary>
        </member>
        <member name="P:SafeObjectPool.IPolicy`1.PoolSize">
            <summary>
            Max Capacity
            </summary>
        </member>
        <member name="P:SafeObjectPool.IPolicy`1.SyncGetTimeout">
            <summary>
            Default fetch timeout
            </summary>
        </member>
        <member name="P:SafeObjectPool.IPolicy`1.IdleTimeout">
            <summary>
            Idle time, if it is exceeded when getting a value, it will be recreated
            </summary>
        </member>
        <member name="P:SafeObjectPool.IPolicy`1.AsyncGetCapacity">
            <summary>
            This is the queue size for async retrieval requests, less than or equal to 0 means no async enabled
            </summary>
        </member>
        <member name="P:SafeObjectPool.IPolicy`1.IsThrowGetTimeoutException">
            <summary>
            Whether to throw an exception after getting a timeout
            </summary>
        </member>
        <member name="P:SafeObjectPool.IPolicy`1.IsAutoDisposeWithSystem">
            <summary>
            Whether to auto dispose when the parent app exits
            </summary>
        </member>
        <member name="P:SafeObjectPool.IPolicy`1.CheckAvailableInterval">
            <summary>
            Interval in seconds for background task to check availability
            </summary>
        </member>
        <member name="M:SafeObjectPool.IPolicy`1.OnCreate">
            <summary>
            Called when an object is created for the pool
            </summary>
            <returns>The created object</returns>
        </member>
        <member name="M:SafeObjectPool.IPolicy`1.OnDestroy(`0)">
            <summary>
            Destructor
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SafeObjectPool.IPolicy`1.OnGetTimeout">
            <summary>
            Triggered when obtaining an object from the object pool times out
            </summary>
        </member>
        <member name="M:SafeObjectPool.IPolicy`1.OnGet(SafeObjectPool.Object{`0})">
            <summary>
            Triggered when the object is successfully obtained from the object pool, the object is initialized by this method
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SafeObjectPool.IPolicy`1.OnGetAsync(SafeObjectPool.Object{`0})">
            <summary>
            Triggered when the object is successfully obtained from the object pool, the object is initialized by this method
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SafeObjectPool.IPolicy`1.OnReturn(SafeObjectPool.Object{`0})">
            <summary>
            Triggered when the object is returned to the object pool
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SafeObjectPool.IPolicy`1.OnCheckAvailable(SafeObjectPool.Object{`0})">
            <summary>
            check availability
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SafeObjectPool.IPolicy`1.OnAvailable">
            <summary>
            Event: fires when available
            </summary>
        </member>
        <member name="M:SafeObjectPool.IPolicy`1.OnUnavailable">
            <summary>
            Event: fires when unavailable
            </summary>
        </member>
        <member name="P:SafeObjectPool.Object`1.Pool">
            <summary>
            Pool that owns this object
            </summary>
        </member>
        <member name="P:SafeObjectPool.Object`1.Id">
            <summary>
            unique identifier in the object pool
            </summary>
        </member>
        <member name="P:SafeObjectPool.Object`1.Value">
            <summary>
            The object we're pooling
            </summary>
        </member>
        <member name="P:SafeObjectPool.Object`1.GetTimes">
            <summary>
            Total number of fetches
            </summary>
        </member>
        <member name="P:SafeObjectPool.Object`1.LastGetTime">
            Last time fetched
        </member>
        <member name="P:SafeObjectPool.Object`1.LastReturnTime">
            <summary>
            Last time returned
            </summary>
        </member>
        <member name="P:SafeObjectPool.Object`1.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="P:SafeObjectPool.Object`1.LastGetThreadId">
            <summary>
            The thread ID when last fetched
            </summary>
        </member>
        <member name="P:SafeObjectPool.Object`1.LastReturnThreadId">
            <summary>
            The thread ID when last returned
            </summary>
        </member>
        <member name="M:SafeObjectPool.Object`1.ResetValue">
            <summary>
            Reset value - destroys and recreates the object
            </summary>
        </member>
        <member name="M:SafeObjectPool.Object`1.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:SafeObjectPool.ObjectPool`1">
            <summary>
            Object Pool Manager
            </summary>
            <typeparam name="T">Object Type</typeparam>
        </member>
        <member name="M:SafeObjectPool.ObjectPool`1.CheckAvailable(System.Int32)">
            <summary>
            Periodically check availability in the background
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:SafeObjectPool.ObjectPool`1.#ctor(System.Int32,System.Func{`0},System.Action{SafeObjectPool.Object{`0}})">
            <summary>
            Object pool constructor
            </summary>
            <param name="poolsize">Max Pool size</param>
            <param name="createObject">The creation delegate for the objects in the pool</param>
            <param name="onGetObject">After successfully obtaining the objects in the pool, perform pre-use operations</param>
        </member>
        <member name="M:SafeObjectPool.ObjectPool`1.#ctor(SafeObjectPool.IPolicy{`0})">
            <summary>
            Object pool constructor
            </summary>
            <param name="policy">custom policy</param>
        </member>
        <member name="M:SafeObjectPool.ObjectPool`1.getFree(System.Boolean)">
            <summary>
            Get available object, or create the object and return it
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
